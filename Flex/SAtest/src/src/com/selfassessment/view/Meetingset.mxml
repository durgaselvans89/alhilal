<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas styleName="Childpanelstyle" 
	xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:georg="src.com.georg.*"
	xmlns:com="src.com.selfassessment.view.*" creationComplete="init()" height="100%" width="100%">
	
	<mx:Script>
		<![CDATA[
			import mx.utils.StringUtil;
			import src.com.selfassessment.controller.Components;
			import mx.containers.HBox;
			import mx.controls.Spacer;
			import mx.events.DataGridEvent;
			import com.boyzoid.PagableArrayCollection.PagableArrayCollection;
			import mx.managers.CursorManager;
			import mx.controls.Alert;
			import src.com.selfassessment.model.MeetingDO;
			import src.com.selfassessment.controller.MeetingController;
			import src.com.selfassessment.controller.CustomerController;
		
			import mx.controls.CheckBox;
			import mx.managers.PopUpManager;
			import mx.collections.ArrayCollection;
			import mx.events.ListEvent;
			import mx.core.Application;
			
			public var meetingdo:MeetingDO = new MeetingDO();
			public var meetingcontroller:MeetingController = new MeetingController();
			
			public var agendaArr:ArrayCollection = new ArrayCollection();
			public var myPagableArrCollection:PagableArrayCollection=new PagableArrayCollection();
			[Bindable]
			public var collectionValue:String = "";
			
			private var CustomerService:CustomerController = new CustomerController(); 
			[Bindable]
			public var _restrict:String="0-9";
			public var tempArray:ArrayCollection = new ArrayCollection();
			public var viewerListArr:ArrayCollection=new ArrayCollection();
			public var usersselected:ArrayCollection = new ArrayCollection();
			
			
			public function init():void{
				//Alert.show(this.parent.parent.toString());
				clearSet=false;
				tempArray=new ArrayCollection();
			   	viewerListArr=new ArrayCollection();
			    usersselected = new ArrayCollection();
				txtAuthorized.text = "";
				if(Application.application.language=="en_US"){
					mainVBox.styleName="ApplyFontSizeEn";
				}
				else{
					mainVBox.styleName="ApplyFontSizeAr";
					
				}
				
				 var today:Date = new Date();  
           		 var yesterday:Date = new Date(today.fullYear, today.month, today.date-1);  
            	 dfDate.disabledRanges = [{rangeEnd:yesterday}];
				
				agendaArr=new ArrayCollection();
				agendaArr.addItem({num:"1",Date:"",Venue:"",Points:"",Duration:""});
				agendaArr.addItem({num:"",Date:"",Venue:"",Points:"",Duration:"Add New"});
				
				myPagableArrCollection = new PagableArrayCollection(new Array(agendaArr));
				myDataGrid.dataProvider = null;
				myDataGrid.dataProvider = agendaArr;
				myDataGrid.rowCount = agendaArr.length-1;
				
				var searchDate:Date = new Date();
				dfDate.selectedDate = new Date(searchDate.getFullYear(), (searchDate.getMonth()),searchDate.getDate(), searchDate.hours, searchDate.minutes);
				
				
			}
			
			private function gridFunction(event:ListEvent):void{
				if(event.columnIndex == 2 || event.columnIndex == 1){
					if(myDataGrid.selectedItem.Duration=="Add New"){
						agendaArr.removeItemAt(agendaArr.length-1);
						agendaArr.addItem({num:agendaArr.length+1,Date:"",Venue:"",Points:"",Duration:""});
						agendaArr.addItem({num:"",Date:"",Venue:"",Points:"",Duration:"Add New"});
						
						myDataGrid.dataProvider=null;
						myDataGrid.dataProvider=agendaArr;
						myDataGrid.rowCount=agendaArr.length-1;
					}
				}
			}
			public var popupwindow:AuthorizedView;
			
			private function setViewer():void{
			    var stringvalue:String = "";
			    
			    popupwindow = AuthorizedView(PopUpManager.createPopUp(this,AuthorizedView,true));
			    popupwindow.btnSave.addEventListener(MouseEvent.CLICK,saveAuthorized);
			    meetingcontroller=new MeetingController();
			    meetingcontroller.getUsersList(function(userList:Array):void{
			    	var exeUserArr:Array=new Array();
			    	//var sLUserArr:Array=new Array();
			    	var nonExeArr:Array=new Array();
			    	for(var i:int=0;i<userList.length;i++){
			    		if(userList[i]['roletype']=='E' || userList[i]['roletype']=='SL'){
			    			exeUserArr.push(userList[i]);
			    		}
			    		/* else if(){
			    			sLUserArr.push(userList[i]);
			    		} */
			    		else if(userList[i]['roletype']=='NE'){
			    			nonExeArr.push(userList[i]);
			    		}
			    		
			    	}
			    	popupwindow.myDataGridExe.dataProvider=exeUserArr;
		    		popupwindow.myDataGridNonExe.dataProvider=nonExeArr;
		    		//popupwindow.myDataGridSubTeamLeader.dataProvider=sLUserArr;
			    });
			    
			     /* var vbox:VBox = new VBox();
			    popupwindow.mainBox.addChild(vbox);
			   	vbox.percentWidth=100;
			   	vbox.percentHeight=100;
			   	vbox.setStyle('borderStyle','Solid');
			   	
			    for(var i:int = 0;i < Application.application.userArrayList.length;i++){
			    	
			    	var hbox:HBox=new HBox();
			    	vbox.addChild(hbox);
			    	
			    	var spc:Spacer=new Spacer();
			    	spc.percentWidth=5;
			    	hbox.addChild(spc);
				    
				    var chk:CheckBox = new CheckBox();
				    chk.data = Application.application.userArrayList[i]["sno"]
				    chk.label = Application.application.userArrayList[i]["name"];
				    //Alert.show(clearSet.toString());
				     if(!clearSet){
				     	 clearSet=false;
					     for(var j:int = 0; j < usersselected.length; j++){
							if(chk.label == usersselected[j].toString()){
								chk.selected = true;
							}
						}	
				     }
				     chk.addEventListener(MouseEvent.CLICK,addPopup);
				     hbox.addChild(chk);
		   	 	}  */
		   }
		   
			public function saveAuthorized(event:MouseEvent):void{
				var collectionValue:String="";
				viewerListArr=new ArrayCollection();
			    for(var i:int=0;i<popupwindow.myDataGridExe.selectedItems.length;i++){
					collectionValue+="\n"+popupwindow.myDataGridExe.selectedItems[i].name;
					viewerListArr.addItem({userID:popupwindow.myDataGridExe.selectedItems[i].userid,userName:popupwindow.myDataGridExe.selectedItems[i].name,emailID:popupwindow.myDataGridExe.selectedItems[i].emailid});
				}
				for(var j:int=0;j<popupwindow.myDataGridNonExe.selectedItems.length;j++){
					collectionValue+="\n"+popupwindow.myDataGridNonExe.selectedItems[j].name;
					viewerListArr.addItem({userID:popupwindow.myDataGridNonExe.selectedItems[j].userid,userName:popupwindow.myDataGridNonExe.selectedItems[j].name,emailID:popupwindow.myDataGridNonExe.selectedItems[j].emailid});
				}
				/* for(var k:int=0;k<popupwindow.myDataGridSubTeamLeader.selectedItems.length;k++){
					collectionValue+="\n"+popupwindow.myDataGridSubTeamLeader.selectedItems[k].name;
					viewerListArr.addItem({userID:popupwindow.myDataGridSubTeamLeader.selectedItems[k].userid,userName:popupwindow.myDataGridSubTeamLeader.selectedItems[k].name,emailID:popupwindow.myDataGridSubTeamLeader.selectedItems[k].emailid});
				} */
			    txtAuthorized.text=StringUtil.trim(collectionValue);
			    PopUpManager.removePopUp(popupwindow);
		   	}
			
			//public var count:int = 0;
			   	
			public function addPopup():void{
				viewerListArr=new ArrayCollection();
				for(var i:int=0;i<popupwindow.myDataGridExe.selectedItems.length;i++){
					viewerListArr.addItem({userID:popupwindow.myDataGridExe.selectedItems[i].userid,userName:popupwindow.myDataGridExe.selectedItems[i].name,emailID:popupwindow.myDataGridExe.selectedItems[i].emailid});
				}
				for(var j:int=0;j<popupwindow.myDataGridNonExe.selectedItems.length;j++){
					viewerListArr.addItem({userID:popupwindow.myDataGridNonExe.selectedItems[j].userid,userName:popupwindow.myDataGridNonExe.selectedItems[j].name,emailID:popupwindow.myDataGridNonExe.selectedItems[j].emailid});
				}
				/* for(var k:int=0;k<popupwindow.myDataGridSubTeamLeader.selectedItems.length;k++){
					viewerListArr.addItem({userID:popupwindow.myDataGridSubTeamLeader.selectedItems[k].userid,userName:popupwindow.myDataGridSubTeamLeader.selectedItems[k].name,emailID:popupwindow.myDataGridSubTeamLeader.selectedItems[k].emailid});
				} */
			    /* var checkBox:CheckBox = event.currentTarget as CheckBox;
			    var emailid:String = new String();
			    //count = count + 1;
			    if(checkBox.selected == true){
					//Alert.show(tempArray.toString());
					if ( tempArray.length > 0 ){
						for(var i:int = 0; i < tempArray.length; i++){
						//	Alert.show(checkBox.label);
							if(checkBox.label != tempArray[i].toString()){
							    tempArray.addItem(checkBox.label);
								usersselected.addItem(checkBox.label);
								for(var i:int = 0;i < Application.application.userArrayList.length;i++){
					  				 if (Application.application.userArrayList[i]["sno"] == checkBox.data){
					  		 			emailid = Application.application.userArrayList[i]["emailid"];
					  				 }
								}	
								viewerListArr.addItem({userID:checkBox.data,userName:checkBox.label,emailID:emailid});
							}
						}
					}else {
					    tempArray.addItem(checkBox.label);
							usersselected.addItem(checkBox.label);
							for(var i:int = 0;i < Application.application.userArrayList.length;i++){
				  				 if (Application.application.userArrayList[i]["sno"] == checkBox.data){
				  		 			emailid = Application.application.userArrayList[i]["emailid"];
				  				 }
							}	
							viewerListArr.addItem({userID:checkBox.data,userName:checkBox.label,emailID:emailid});
							
					}	
					
				}
				else{
			      	for(var i:int = 0; i < tempArray.length; i++){
						if(checkBox.label == tempArray[i].toString()){
							var index=tempArray.getItemIndex(checkBox.label);
							viewerListArr.removeItemAt(index);
							tempArray.removeItemAt(index);
							usersselected.removeItemAt(index);
							viewerListArr.refresh();
							tempArray.refresh();
						}
					}
				} */
			}
			
			
			public var meetingID:int=0;
			public var agendaFlag:int=0;
			
			public function createMeeting():void{
				var toDate:Date=new Date();
				agendaFlag=0;
				for(var i:int=0;i<agendaArr.length;i++){
					if(agendaArr[i]["Duration"]!="Add New" && agendaArr[i]["Points"]!=""){
						agendaFlag=1;
					}
				}
				if(txtSubject.text != "" && txtAuthorized.text!="" && dfDate.text != "" && txtVenue.text != "" ){
					if(agendaFlag==1){
						meetingdo.meetingname = StringUtil.trim(txtSubject.text);
		        		//meetingdo.meetingparticipationid = parseInt("32");
		        		meetingdo.meetingvenue =  StringUtil.trim(txtVenue.text);
		        		meetingdo.meetingdatetime = dfDate.selectedDate.getFullYear()+"-"+(dfDate.selectedDate.getMonth()+1)+"-"+dfDate.selectedDate.getDate()+" "+dfDate.selectedDate.getHours()+":"+dfDate.selectedDate.getMinutes();
		        		meetingdo.createdAt=toDate.getFullYear()+"-"+toDate.getMonth()+"-"+toDate.getDate();
		        		meetingdo.createdBy=parseInt(Components.instance.session.userid);
		        		meetingdo.participants= StringUtil.trim(txtAuthorized.text);
		        		meetingcontroller=new MeetingController();
		        		meetingcontroller.createMeeting(meetingdo, function(resultArr:Number):void{
	        				meetingID=resultArr;
		        			if(resultArr !=0){
	        	  			 	saveAgendaDetails();
	        	  			}
	        	  		});	 
					}
					else{
						Alert.show("Enter agenda details");
					}
	        		
				}
				else{
					Alert.show("Enter all details");
				}
		   	}
			private function saveAgendaDetails():void{
				var agendaDO:MeetingDO=new MeetingDO();
				var resulArr:Array=new Array();
				for(var i:int=0;i<agendaArr.length;i++){
					if(agendaArr[i]["Duration"]!="Add New" && agendaArr[i]["Points"]!=""){
						agendaDO=new MeetingDO();
						agendaDO.meetingid=meetingID;
						agendaDO.discussionPoints=agendaArr[i]["Points"];
						if(agendaArr[i]["Duration"]==""){
							agendaDO.duration=5;
						}
						else{
							agendaDO.duration=agendaArr[i]["Duration"];
						}
						resulArr.push(agendaDO);
					}
				}
				meetingcontroller=new MeetingController();
				meetingcontroller.insertAgendaDtls(resulArr,function(resultAgenda:Number):void{
					//Alert.show(resultAgenda.toString());
					if(resultAgenda>=0){
						savePartcipantsList();
					}
					
				});
			}
			private function savePartcipantsList():void{
				//Alert.show("Calling");
				var participantsDO:MeetingDO=new MeetingDO();
				var resulArr:Array=new Array();
				for(var i:int=0;i<viewerListArr.length;i++){
					if(viewerListArr[i]["userID"]!="" && viewerListArr[i]["userID"]!=null){
						participantsDO=new MeetingDO();
						participantsDO.meetingid=meetingID;
						participantsDO.meetingparticipationid=viewerListArr[i]["userID"];
						participantsDO.status = viewerListArr[i]["emailID"];
						participantsDO.meetingname = StringUtil.trim(txtSubject.text); 
						participantsDO.meetingvenue =  StringUtil.trim(txtVenue.text);
			        	participantsDO.meetingdatetime = dfDate.selectedDate.getFullYear()+"-"+(dfDate.selectedDate.getMonth()+1)+"-"+dfDate.selectedDate.getDate()+" "+dfDate.selectedDate.getHours()+":"+dfDate.selectedDate.getMinutes();
			        	participantsDO.responsename=Components.instance.session.username+" "+Components.instance.session.surname;
			        	resulArr.push(participantsDO);
					}
					
				}
				//Alert.show(resulArr.length.toString());
				
				meetingcontroller=new MeetingController();
				meetingcontroller.insertMeetingParticipants(resulArr,function(resultNum:Number):void{
					if(resultNum>=0){
						clearAll();
						Alert.show("Meeting details created successfully and mail sent to participants");
					}
					else{
						Alert.show("Try again");
					}
				});
			}
			public var clearSet:Boolean=false;
			private function clearAll():void{
				clearSet=true;
				txtAuthorized.text="";
				txtSubject.text="";
				txtVenue.text="";
				agendaArr=new ArrayCollection();
				agendaArr.addItem({num:"1",Date:"",Venue:"",Points:"",Duration:""});
			 	agendaArr.addItem({num:"",Date:"",Venue:"",Points:"",Duration:"Add New"});
				
				myPagableArrCollection = new PagableArrayCollection(new Array(agendaArr));
				myDataGrid.dataProvider = null;
				myDataGrid.dataProvider = agendaArr;
				myDataGrid.rowCount = agendaArr.length-1;
				viewerListArr=new ArrayCollection();
				/* var searchDate:Date = new Date();
				dfDate.selectedDate = new Date(searchDate.getFullYear(), (searchDate.getMonth()),searchDate.getDate(), searchDate.hours, searchDate.minutes); */
				
				dfDate.text="";
				
			}
			
		]]>
	</mx:Script>
	<mx:VBox id="mainVBox" name="projectplan" width="90%" height="100%" styleName="ApplyFontSize" verticalScrollPolicy="off">
		
		<mx:Spacer height="5%"/>
		
		<mx:HBox width="100%" height="22%">
			<mx:VBox width="50%" >
				<mx:HBox width="100%" >
					<mx:Spacer width="10%"/>
					<mx:Text fontWeight="bold" width="24%" text="@Resource(bundle='myResources', key='subject')"/>
					<mx:TextInput width="60%" id="txtSubject" maxChars="50"/>
				</mx:HBox>
				<mx:HBox width="100%" >
					<mx:Spacer width="10%"/>
					<mx:Text fontWeight="bold" width="24%" text="@Resource(bundle='myResources', key='dateTime')"/>
					<georg:DateTimeField yearNavigationEnabled="true" id="dfDate" width="18%" formatString="DD-MM-YYYY" styleName="bgcolor"/>
				</mx:HBox>
				<mx:HBox width="100%" >
					<mx:Spacer width="10%"/>
					<mx:Text fontWeight="bold" width="24%" text="@Resource(bundle='myResources', key='venue')"/>
					<mx:TextInput width="60%" id="txtVenue"  maxChars="50"/>
				</mx:HBox>
			</mx:VBox>	
			
			<mx:Spacer width="3%"/>
			<mx:Text fontWeight="bold" width="15%" text="@Resource(bundle='myResources', key='authorizedPerson')"/>
			<mx:TextArea width="27%" editable="false" height="80%" id="txtAuthorized"/>
			<mx:Label id="lblAddPerson" text="+" click="setViewer()"/>
		</mx:HBox>
		
		<mx:HBox width="95%" height="5%">
			<mx:Spacer width="5%"/>
			<mx:Text fontWeight="bold" width="12%" text="@Resource(bundle='myResources', key='agenda')"/>
		</mx:HBox>
		
		<mx:HBox height="55%" width="95%">
		<mx:Spacer width="5%"/>
			<mx:DataGrid editable="true" id="myDataGrid" itemClick="gridFunction(event)" variableRowHeight="true" width="100%" height="100%">
				<mx:columns>
					<mx:DataGridColumn editable="false" wordWrap="true" headerText="@Resource(bundle='myResources', key='sno')" dataField="num" width="50">
					</mx:DataGridColumn>
					<mx:DataGridColumn editable="true" wordWrap="true" headerText="Discussion points" dataField="Points">
					</mx:DataGridColumn>
					<mx:DataGridColumn editable="true" editorDataField="value" wordWrap="true" headerText="Duration(in mins)" dataField="Duration" width="150">
						<mx:itemEditor>
							<mx:Component>
							<mx:NumericStepper  stepSize="5" minimum="5" maximum="120"/>
								<!--<mx:TextInput backgroundAlpha="0" borderStyle="none" restrict="0-9" text="{data.Duration}" maxChars="3"/>-->
							</mx:Component>
						</mx:itemEditor>
					</mx:DataGridColumn>
				</mx:columns>
			</mx:DataGrid>
		</mx:HBox>
		
		<mx:Spacer height="2%"/>
		
		<mx:HBox width="95%" horizontalAlign="right">
			<mx:Button label="Save" click="createMeeting()"/>
			<mx:Button label="Clear" click="clearAll()"/>
		</mx:HBox>
	
		<mx:Spacer height="3%"/>

	</mx:VBox>
</mx:Canvas>