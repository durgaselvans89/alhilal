<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" styleName="ListmenuContainer" 
	xmlns:controller="com.selfassessment.controller.*" xmlns:ui="flex.utils.ui.*" creationComplete="{init()}">

<mx:Style source="src/com/selfassessment/view/assets/Styles.css"/>	
 	
<mx:Metadata>
		[Event("LinkageReport", type="com.selfassessment.events.LinkageReportEvent")]
		[Event("ScoreReport", type="com.selfassessment.events.ScrollReportEvent")]
		[Event("FeedbackReport", type="com.selfassessment.events.FeedbackReportEvent")]
		[Event("SummaryReport", type="com.selfassessment.events.SummaryReport")]
		[Event("AttachDocumentReport", type="com.selfassessment.events.AttachmentDocReport")]
		[Event("SourceReport", type="com.selfassessment.events.SourceReport")]
		[Event("ProjectReport", type="com.selfassessment.events.ProjectReportEvent")]
		[Event("MissingApproachesReport", type="com.selfassessment.events.MissingApproachesReport")]
		
		
</mx:Metadata>	
	
<mx:Script>
    <![CDATA[
    	import src.com.selfassessment.events.MissingApproachesReport;
    	import src.com.selfassessment.events.SourceInformationReport;
    	import src.com.selfassessment.events.AttachmentDocReport;
    	
    	import src.com.selfassessment.events.SummaryReport;
    	import src.com.selfassessment.events.FeedbackReport;
    	import src.com.selfassessment.events.ScrollReportEvent;
    	import src.com.selfassessment.events.LinkageReportEvent;
    	import src.com.selfassessment.events.ProjectReportEvent;
    	
    	import mx.core.Application;
    
    	//import src.com.selfassessment.events.*;
    	import src.com.selfassessment.controller.*;
    	import src.com.selfassessment.view.*;
    	import mx.controls.Alert;
    	
        [Bindable]
		public var selectedNode:XML;
		
		public var loadControllerView:Controller = new Controller();
		
		public function init():void{
			if(Application.application.language=="en_US"){
				myTree.dataProvider=treeData;
			}
			else{
				myTree.dataProvider=treeArabicData;
			}
			myTree.selectedIndex=0;
			dispatchEvent(new LinkageReportEvent(LinkageReportEvent.guide_select));
		}
		public function treeChanged(event:Event):void {
    
			selectedNode = List(event.target).selectedItem as XML;
			Application.application.CurrentSelection = "Report --> "+selectedNode.@label;
			if(selectedNode.@label == resourceManager.getString('myResources','linkageReport')){
			//	Alert.show("dfgdfgdfg");
				dispatchEvent(new LinkageReportEvent(LinkageReportEvent.guide_select));
        	}
    	
        	else if(selectedNode.@label == resourceManager.getString('myResources','scorereport')){
        		
				dispatchEvent(new ScrollReportEvent(ScrollReportEvent.guide_select));
        	}
        	
        	else if(selectedNode.@label == resourceManager.getString('myResources','feedbackReport')){
        		
				dispatchEvent(new FeedbackReport(FeedbackReport.excellence_select));
        	}
        	else if(selectedNode.@label == resourceManager.getString('myResources','summaryReport')){
        	//	Alert.show(SummaryReport.excellence_select.toString());
        		dispatchEvent(new SummaryReport(SummaryReport.excellence_select));
        	}
        	else if(selectedNode.@label == resourceManager.getString('myResources','attachedReport')){
        		
        		dispatchEvent(new AttachmentDocReport(AttachmentDocReport.attachDocReport));
        		//Alert.show(SummaryReport.attachDocReport.toString());
        	}
        	else if(selectedNode.@label == resourceManager.getString('myResources','sourceReport')){
        		//Alert.show("Calling");
        			dispatchEvent(new SourceInformationReport(SourceInformationReport.sourceReport));
        	}
        	else if(selectedNode.@label == 'Project Report'){
        		//Alert.show("Calling");
        			dispatchEvent(new ProjectReportEvent(ProjectReportEvent.guide_select));
        	}
        	else if(selectedNode.@label == 'Missing Approaches Report'){
        		dispatchEvent(new MissingApproachesReport(MissingApproachesReport.missing_approaches_report));       	
        	}
		}
		
		public function clickEvent(event:Event):void{
			
			selectedNode = List(event.target).selectedItem as XML;
			
			if(selectedNode.@label == resourceManager.getString('myResources','linkageReport')){
				
				dispatchEvent(new LinkageReportEvent(LinkageReportEvent.guide_select));
        	}
    	
        	else if(selectedNode.@label == resourceManager.getString('myResources','scorereport')){
        		dispatchEvent(new ScrollReportEvent(ScrollReportEvent.guide_select));
        	}
        	
        	else if(selectedNode.@label == resourceManager.getString('myResources','feedbackReport')){
        		dispatchEvent(new FeedbackReport(FeedbackReport.excellence_select));
        	}
        	else if(selectedNode.@label == resourceManager.getString('myResources','summaryReport')) {
        		dispatchEvent(new SummaryReport(SummaryReport.excellence_select));
        	}
        	else if(selectedNode.@label == resourceManager.getString('myResources','attachedReport')){
        	//	Alert.show(SummaryReport.excellence_select.toString());
        		dispatchEvent(new AttachmentDocReport(AttachmentDocReport.attachDocReport));
        	}
        	else if(selectedNode.@label == resourceManager.getString('myResources','sourceReport')){
				dispatchEvent(new SourceInformationReport(SourceInformationReport.sourceReport));       	
        	}
        	else if(selectedNode.@label == 'Project Report'){
        		dispatchEvent(new ProjectReportEvent(ProjectReportEvent.guide_select));       	
        	}
        	else if(selectedNode.@label == 'Missing Approaches Report'){
        		dispatchEvent(new MissingApproachesReport(MissingApproachesReport.missing_approaches_report));       	
        	}
		}
		
    ]]>
</mx:Script>
    
<mx:XMLList id="treeData">
	<node label="Linkage Report"></node>
	<node label="Score Report"></node>
    <node label="Feedback Report"></node>
    <node label="Summary Report"></node>
    <node label="Attached Document Report"></node>
   <!-- <node label="Source of Information Report"></node>-->
    <node label="Project Report"></node>
    <node label="Missing Approaches Report"></node>
</mx:XMLList>
<mx:XMLList id="treeArabicData">
	<node label="ربط تقرير"></node>
	<node label="يسجل تقرير"></node>
    <node label="ملاحظات تقرير"></node>
    <node label="ملخص تقرير"></node>
    <node label="الوثيقة المرفقة تقرير"></node>
   <!-- <node label="مصدر المعلومات تقرير"></node>-->
    <node label="Project Report"></node>
    <node label="Missing Approaches Report"></node>
</mx:XMLList>
	
<mx:List fontWeight="bold" fontSize="11" id="myTree" width="100%" height="100%" labelField="@label"
           paddingLeft="5" dataProvider="{treeData}" change="treeChanged(event)" click="clickEvent(event)" selectedIndex="0" 
            styleName="ListMenustyle" wordWrap="true" variableRowHeight="true">
           <!-- <mx:itemRenderer>
            	<mx:Component>
            		<mx:Text paddingLeft="5" text="{}"/>
            	</mx:Component>
            </mx:itemRenderer>-->
		
</mx:List>
</mx:Panel>

