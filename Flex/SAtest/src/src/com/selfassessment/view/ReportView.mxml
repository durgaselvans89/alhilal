<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml"  styleName="userContentStyle" creationComplete="init()" 
	width="100%" height="100%" xmlns:com="src.com.selfassessment.view.*" horizontalGap="0">
 
	<mx:Style source="src/com/selfassessment/view/assets/Styles.css"/>	

	
	<mx:Script>
		<![CDATA[
			import mx.utils.ObjectUtil;
			import com.google.maps.interfaces.INavigationControl;
			import mx.collections.ArrayCollection;
			import com.degrafa.geometry.Path;
			import com.boyzoid.PagableArrayCollection.PagableArrayCollection;
			import src.com.selfassessment.controller.TeamController;
			import src.com.selfassessment.events.LinkageReportEvent;
			import mx.core.Application;
			import mx.containers.Panel;
			import src.com.selfassessment.view.*;
			import mx.controls.Alert;
			import src.com.selfassessment.events.EventCriteriaConstants;
			import mx.effects.*;
			
			public function init():void{
				Application.application.CurrentSelection = "Report --> Linkage Report";
				//currentState='Linkage';
						CriteriaService.selectAllSubAssessment(Application.application.selectedLocation,function(eanblerDetailsArr:Array):void{
								reportLinkage.myDataGrid.dataProvider=eanblerDetailsArr;
								reportLinkage.myDataGrid.rowCount=eanblerDetailsArr.length+1;
								CriteriaService = new TeamController();
								CriteriaService.selectAllResultAssessment(Application.application.selectedLocation,function(resultDetailsArr:Array):void{
									reportLinkage.myDataGridResult.dataProvider=resultDetailsArr;
									reportLinkage.myDataGridResult.rowCount=resultDetailsArr.length+1;
									//Application.application.SummaryReport = reportSummary.height;
									//Alert.show(reportSummary.height.toString());
								});
							
						});
			}
			
			public var CriteriaService:TeamController=new TeamController();
			
			
			public function ContentPageChange(event:Event):void {

				var choosenChild:String = event.type;
				Application.application.CurrentSelection = "Report -> "+choosenChild;	
				if(null != choosenChild){
					//Alert.show(choosenChild);
					if(choosenChild == 'LinkageReport'){
						//Not a bug
						currentState='';
						CriteriaService.selectAllSubAssessment(Application.application.selectedLocation,function(eanblerDetailsArr:Array):void{
								reportLinkage.myDataGrid.dataProvider=eanblerDetailsArr;
								reportLinkage.myDataGrid.rowCount=eanblerDetailsArr.length+1;
								CriteriaService = new TeamController();
								CriteriaService.selectAllResultAssessment(Application.application.selectedLocation,function(resultDetailsArr:Array):void{
									reportLinkage.myDataGridResult.dataProvider=resultDetailsArr;
									reportLinkage.myDataGridResult.rowCount=resultDetailsArr.length+1;
									//Application.application.SummaryReport = reportSummary.height;
									//Alert.show(reportSummary.height.toString());
								});
							
						});
					}
					else if(choosenChild == 'ScoreReport'){
						Application.application.CurrentSelection = "Report -> Score Report";
						var enablerTotScorePts:Number=0;
						var enablerTotOverAllPts:Number=0;
						var enablerTotTotMaxPts:Number=0;
						var resultTotScorePts:Number=0;
						var resultTotOverAllPts:Number=0;
						var resultTotTotMaxPts:Number=0;
						var chartTotPts:Array=new Array();						
						currentState='Score';
						CriteriaService=new TeamController();
						CriteriaService.getAssessmentScorePoints(Application.application.selectedLocation,"Enabler",function(enablerScorePoints:Array):void{
							reportScore.myDataGridEnabler.dataProvider=enablerScorePoints;
							reportScore.myDataGridEnabler.rowCount=enablerScorePoints.length+1;
							
							CriteriaService=new TeamController();
							CriteriaService.getAssessmentScorePoints(Application.application.selectedLocation,"Result",function(resultScorePoints:Array):void{
								reportScore.myDataGridResult.dataProvider=resultScorePoints;
								reportScore.myDataGridResult.rowCount=resultScorePoints.length+1;
								
								CriteriaService=new TeamController();
								CriteriaService.getAssessmentTotalPoints(Application.application.selectedLocation,"Enabler",function(enablerTotalPoints:Array):void{
									//Alert.show(ObjectUtil.toString(enablerTotalPoints));
									Application.application.enablerTotPoints=new ArrayCollection(enablerTotalPoints);
									var enablerTotalPointsArr:Array=new Array();
									for(var eIndex:int=0;eIndex<5;eIndex++){
										enablerTotalPointsArr.push(enablerTotalPoints[eIndex]);
									}
									reportScore.myDataGridEnablerTotalPoints.dataProvider=enablerTotalPointsArr;
									reportScore.myDataGridEnablerTotalPoints.rowCount=enablerTotalPointsArr.length+1;
									//reportScore.enablerChart.dataProvider = enablerTotalPoints;
									chartTotPts=enablerTotalPoints;
									//reportScore.enablerCategory.dataProvider = enablerTotalPoints;
									
									CriteriaService=new TeamController();
									CriteriaService.getAssessmentTotalPoints(Application.application.selectedLocation,"Result",function(resultTotalPoints:Array):void{
										Application.application.resultTotPoints=new ArrayCollection(resultTotalPoints);
										reportScore.myDataGridResultTotalPoints.dataProvider=resultTotalPoints;
										reportScore.myDataGridResultTotalPoints.rowCount=resultTotalPoints.length+1;
										
										
										
										for(var index:int=0;index<resultTotalPoints.length;index++){
											chartTotPts.push(resultTotalPoints[index]);
										}
										reportScore.resultChart.dataProvider = chartTotPts;
										reportScore.resultCategory.dataProvider = chartTotPts;
										
										for(var i:int=0;i<5;i++){
											enablerTotScorePts=parseFloat(Application.application.enablerTotPoints[i]["subTeamScore"].toString())+enablerTotScorePts;
											enablerTotOverAllPts=parseFloat(Application.application.enablerTotPoints[i]["overallPoints"].toString())+enablerTotOverAllPts;
											enablerTotTotMaxPts=parseFloat(Application.application.enablerTotPoints[i]["pointsAwarded"].toString())+enablerTotTotMaxPts;
										}
										
										reportScore.lblEnablerPointsHeader.width=reportScore.colEnablerCriteria.width;
										reportScore.lblEnablerTotalScore.width=reportScore.colEnablerScore.width;
										reportScore.lblEnablerDummy.width=reportScore.colEnablerFactor.width;
										reportScore.lblEnablerTotPoints.width=reportScore.colEnablerPoints.width;
										reportScore.lblEnablerTotMaxScore.width=reportScore.colEnablerMaxPts.width;
										
										reportScore.lblEnablerTotalScore.text=enablerTotScorePts.toString();
										reportScore.lblEnablerTotPoints.text=enablerTotOverAllPts.toString();
										reportScore.lblEnablerTotMaxScore.text=enablerTotTotMaxPts.toString();
										
										for(var j:int=0;j<resultTotalPoints.length;j++){
											resultTotScorePts=parseFloat(resultTotalPoints[j]["subTeamScore"].toString())+resultTotScorePts;
											resultTotOverAllPts=parseFloat(resultTotalPoints[j]["overallPoints"].toString())+resultTotOverAllPts;
											resultTotTotMaxPts=parseFloat(resultTotalPoints[j]["pointsAwarded"].toString())+resultTotTotMaxPts;
										}
										reportScore.lblResultHeader.width=reportScore.colResultHeader.width;
										reportScore.lblResultTotalScore.width=reportScore.colEnablerScore.width;
										reportScore.lblResultDummy.width=reportScore.colResultFactor.width;
										reportScore.lblResultTotPoints.width=reportScore.colResultTotPoints.width;
										reportScore.lblResultTotMaxScore.width=reportScore.colResultTotMaxScore.width;
										
										reportScore.lblResultTotalScore.text=resultTotScorePts.toString();
										reportScore.lblResultTotPoints.text=resultTotOverAllPts.toString();
										reportScore.lblResultTotMaxScore.text=resultTotTotMaxPts.toString();
									});
								});
							});
						});
					}
					else if(choosenChild == 'FeedbackReport'){
						Application.application.CurrentSelection = "Report -> Feedback Report";
						var totalA:Number=0;
						var totalD:Number=0;
						var totalAR:Number=0;
						var totalOverAllScore:Number=0;
						var totalRel:Number=0;
						var totalPerf:Number=0;
						var totalSeg:Number=0;
						var totalTa:Number=0;
						var totalTr:Number=0;
						var totalCo:Number=0;
						var totalCa:Number=0;
						var totalAvg:Number=0;
						var enablerAvgScoreArr:Array=new Array();
						var resultAvgScoreArr:Array=new Array();
						currentState='Feedback';
						 CriteriaService = new TeamController();
						cursorManager.setBusyCursor();
						CriteriaService.getEnablerFeedbackScore(Application.application.selectedLocation,function(resultEnablerFeedbackScore:Array):void{
								
								var enablerFeedbackScore:Array=new Array();
								//enablerFeedbackScore=resultEnablerFeedbackScore;
								for(var index:int=0;index<resultEnablerFeedbackScore.length;index++){
									enablerFeedbackScore.push({
									criteriaShortDesc:resultEnablerFeedbackScore[index]["criteriaShortDesc"],
									approachTitle:resultEnablerFeedbackScore[index]["approachTitle"],
									approachdesc:resultEnablerFeedbackScore[index]["approachdesc"],
									strength:formatStrength(resultEnablerFeedbackScore[index]["strength"]),
									areaforimprovement:formatStrength(resultEnablerFeedbackScore[index]["areaforimprovement"]),
									deployment:resultEnablerFeedbackScore[index]["deployment"],
									assessmentandreview:resultEnablerFeedbackScore[index]["assessmentandreview"],
									score:resultEnablerFeedbackScore[index]["score"]});
								}
								
								
								
								reportFeedback.myDataGridEnabler.dataProvider=enablerFeedbackScore;
								reportFeedback.myDataGridEnabler.rowCount=enablerFeedbackScore.length+4;
								cursorManager.removeBusyCursor();
								
								CriteriaService.getResultFeedbackScore(Application.application.selectedLocation,function(resultTempFeedbackScore:Array):void{
									var resultFeedbackScore:Array=new Array();
									for(var j:int=0;j<resultTempFeedbackScore.length;j++){
										resultFeedbackScore.push({
											criteriaPartDesc:resultTempFeedbackScore[j]["criteriaPartDesc"],
											result_name:resultTempFeedbackScore[j]["result_name"],
											strength:formatStrength(resultTempFeedbackScore[j]["strength"]),
											areasforimprovement:formatStrength(resultTempFeedbackScore[j]["areasforimprovement"]),
											scope:resultTempFeedbackScore[j]["scope"],
											segmentation:resultTempFeedbackScore[j]["segmentation"],
											trends:resultTempFeedbackScore[j]["trends"],
											targets:resultTempFeedbackScore[j]["targets"],
											comparisons:resultTempFeedbackScore[j]["comparisons"],
											causes:resultTempFeedbackScore[j]["causes"],
											score:resultTempFeedbackScore[j]["score"],relevance:resultTempFeedbackScore[j]["relevance"],
											performance:resultTempFeedbackScore[j]["performance"]});
									}
									reportFeedback.myDataGridResult.dataProvider=resultFeedbackScore;
										reportFeedback.myDataGridResult.rowCount=resultFeedbackScore.length+5;
										cursorManager.removeBusyCursor();
										reportFeedback.myDataGridEnabler.explicitHeight=300;
										reportFeedback.myDataGridResult.explicitHeight=300;
									
									/* reportFeedback.txtAvgA.width=reportFeedback.colA.width;
									reportFeedback.txtAvgAR.width=reportFeedback.colAR.width;
									reportFeedback.txtAvgD.width=reportFeedback.colD.width;
									reportFeedback.txtAvgScore.width=reportFeedback.colScore.width;
									 */
									
									
									for(var i:int=0;i<enablerFeedbackScore.length;i++){
										totalA=totalA + parseInt(enablerFeedbackScore[i]["approachdesc"].toString());
										totalD= totalD + parseInt(enablerFeedbackScore[i]["deployment"].toString());
										totalAR=totalAR + parseInt(enablerFeedbackScore[i]["assessmentandreview"].toString());
										totalOverAllScore=totalOverAllScore + parseInt(enablerFeedbackScore[i]["score"].toString());
									}
									enablerAvgScoreArr=new Array();
									enablerAvgScoreArr.push({attributes:"Approach",avg:totalA});
									enablerAvgScoreArr.push({attributes:"Deployment",avg:totalD});
									enablerAvgScoreArr.push({attributes:"Assessment & Refinement",avg:totalAR});
									
									reportFeedback.enablerAvgDataGrid.dataProvider=enablerAvgScoreArr;
									/* reportFeedback.txtAvgA.text=Math.round((totalA/enablerFeedbackScore.length)).toString();
									reportFeedback.txtAvgAR.text =Math.round(totalAR/enablerFeedbackScore.length).toString();
									reportFeedback.txtAvgD.text=Math.round(totalD/enablerFeedbackScore.length).toString();
									reportFeedback.txtAvgScore.text=Math.round(totalOverAllScore/enablerFeedbackScore.length).toString();
									reportFeedback.txtOverAllScoreVal.text=Math.round((totalA+totalAR+totalD+totalOverAllScore)/4).toString();
									
									
									
									reportFeedback.txtRel.width=reportFeedback.colRel.width;
									reportFeedback.txtSeg.width=reportFeedback.colSeg.width;
									reportFeedback.txtTa.width=reportFeedback.colTa.width;
									reportFeedback.txtTr.width=reportFeedback.colTr.width;
									reportFeedback.txtCo.width=reportFeedback.colCo.width;
									reportFeedback.txtCa.width=reportFeedback.colCa.width;
									reportFeedback.txtAvg.width=reportFeedback.colAvg.width; */
									
									
									for(var j:int=0;j<resultFeedbackScore.length;j++){
										totalRel=totalRel+parseInt(resultFeedbackScore[j]["relevance"].toString());
										totalPerf=totalPerf+parseInt(resultFeedbackScore[j]["performance"].toString());
									}
									resultAvgScoreArr=new Array();
									resultAvgScoreArr.push({attributes:"Relevance & Usability",avg:totalA});
									resultAvgScoreArr.push({attributes:"Performance",avg:totalD});
									reportFeedback.resultAvgDataGrid.dataProvider=resultAvgScoreArr;
									/* reportFeedback.txtRel.text=Math.round(totalRel/resultFeedbackScore.length).toString();
									reportFeedback.txtSeg.text=Math.round(totalSeg/resultFeedbackScore.length).toString();
									reportFeedback.txtTa.text=Math.round(totalTa/resultFeedbackScore.length).toString();
									reportFeedback.txtTr.text=Math.round(totalTr/resultFeedbackScore.length).toString();
									reportFeedback.txtCo.text=Math.round(totalCo/resultFeedbackScore.length).toString();
									reportFeedback.txtCa.text=Math.round(totalCa/resultFeedbackScore.length).toString();
									reportFeedback.txtAvg.text=Math.round(totalAvg/resultFeedbackScore.length).toString();
									reportFeedback.txtSumScope.text=Math.round((totalRel+totalSeg)/2).toString();
									reportFeedback.txtSumExcellence.text=Math.round((totalTa+totalTr+totalCo+totalCa)/4).toString();
									reportFeedback.txtResAvgScore.text=reportFeedback.txtAvg.text
									reportFeedback.txtAwardedVal.text=Math.round((parseInt(reportFeedback.txtSumScope.text)+parseInt(reportFeedback.txtSumExcellence.text)+parseInt(reportFeedback.txtResAvgScore.text))/3).toString(); */
								
							}); 
							
						});
						/* this.parent.height=850;
						this.reportFeedback.height=870; */
					}
					else if(choosenChild=='SummaryReport'){
						Application.application.CurrentSelection = "Report -> Summary Report";
						currentState='Summary';
						CriteriaService = new TeamController();
						
						CriteriaService.selectAllSubAssessment(Application.application.selectedLocation,function(eanblerDetailsArr:Array):void{
								reportSummary.myDataGrid.dataProvider=eanblerDetailsArr;
								reportSummary.myDataGrid.rowCount=eanblerDetailsArr.length+1;
								CriteriaService = new TeamController();
								CriteriaService.selectAllResultAssessment(Application.application.selectedLocation,function(resultDetailsArr:Array):void{
									reportSummary.myDataGridResult.dataProvider=resultDetailsArr;
									reportSummary.myDataGridResult.rowCount=resultDetailsArr.length+1;
									reportSummary.myDataGrid.explicitHeight=300;
									reportSummary.myDataGridResult.explicitHeight=300;
								});
							
						});
						//this.parent.parent.parent.height = Application.application.SummaryReport;
						
					}
					else if(choosenChild=='AttachDocumentReport'){
						Application.application.CurrentSelection = "Report -> Attached Document Report";
						//Alert.show("Calling");
						currentState = 'Attachment';
						attachDocReport.txtWord.text="";
						attachDocReport.printVBox.width=0;
						attachDocReport.printVBox.height=0;  
						CriteriaService = new TeamController();
						CriteriaService.SelectAttachedDocReport(attachDocReport.txtWord.text,function(resultArr:Array):void{
							attachDocReport.myDataGrid.dataProvider=resultArr;
							attachDocReport.myPrintDataGrid.dataProvider=resultArr;
							attachDocReport.myDataGrid.rowCount=resultArr.length+1;
						});
					}
					else if(choosenChild=='SourceReport'){
						Application.application.CurrentSelection = "Report -> Source Of Information Report";
						//Alert.show("Calling");
						currentState = 'Source';
						CriteriaService = new TeamController();
						sourceReport.txtWord.text="";
						CriteriaService.SelectSourceOfInformation(sourceReport.txtWord.text,function(resultArr:Array):void{
							sourceReport.myDataGrid.dataProvider=resultArr;
							sourceReport.myDataGrid.rowCount=resultArr.length+1;
							
						});
					}
					else if(choosenChild=='ProjectReport'){
						//Alert.show("project Report");
						Application.application.CurrentSelection = "Report -> Improvement Projects Report";
						currentState = 'ProjectReport';
						CriteriaService=new TeamController();
   						CriteriaService.SearchProjectReports(projectReport.txtProjectTitle.text,projectReport.txtStatus.text,function(resultArr:Array):void{
   							projectReport.myDataGrid.dataProvider=resultArr;
	        				//myExpDataGrid.dataProvider=myDataGrid.dataProvider;
	        				if(resultArr.length==0){
	        					Alert.show(resourceManager.getString('myResources','recordsNotFound'));
	        				}
   						});
					}
					else if(choosenChild=="MissingApproachesReport"){
						currentState="MissingApproachesReport";
						CriteriaService=new TeamController();
   						CriteriaService.selectMissingApproaches(function(resultArr:Array):void{
   							missingAppReport.myDataGrid.dataProvider=resultArr;
	        				if(resultArr.length==0){
	        					Alert.show(resourceManager.getString('myResources','recordsNotFound'));
	        				}
   						});
					}
				} 
			}
			private function formatStrength(str:String):String{
				var tempArr:Array=str.split(':@@:');
				var resultStr:String="";
				if(tempArr.length>0 && str!=""){
					for(var i:int=0;i<tempArr.length;i++){
						if(resultStr==""){
							if(tempArr[i]!='None')
								resultStr="(1) "+tempArr[i].toString();
							else
								resultStr=tempArr[i].toString();
						}
						else{
							var sno:int=i+1;
							resultStr=resultStr+"\n("+sno+") "+tempArr[i].toString();
						}
					}
				}
				return resultStr;
			}
			
		]]>
	</mx:Script>
	
	<mx:states>
		<!--<mx:State name="Linkage">
			<mx:RemoveChild	target="{reportView}"/>
    		<mx:AddChild relativeTo="{content}">
            	 <com:ReportLinkage id="reportLinkage" width="100%" height="100%"/>
			</mx:AddChild>
    	</mx:State>-->
    	<mx:State name="Score">
			<mx:RemoveChild	target="{reportLinkage}"/>
    		<mx:AddChild relativeTo="{content}">
            	  <com:ReportScore id="reportScore" width="100%" height="100%"/>
			</mx:AddChild>
    	</mx:State>
    	<mx:State name="Summary">
			<mx:RemoveChild	target="{reportLinkage}"/>
    		<mx:AddChild relativeTo="{content}">
            	  <com:ReportSummary id="reportSummary" width="100%" height="100%"/>
			</mx:AddChild>
    	</mx:State>
    	<mx:State name="Feedback">
			<mx:RemoveChild	target="{reportLinkage}"/>
    		<mx:AddChild relativeTo="{content}">
            	  <com:ReportFeedback id="reportFeedback" width="100%" height="100%"/>
			</mx:AddChild>
    	</mx:State>
    	<mx:State name="Attachment">
			<mx:RemoveChild	target="{reportLinkage}"/>
    		<mx:AddChild relativeTo="{content}">
            	  <com:AttachDocReport id="attachDocReport" height="100%" width="100%"/>
			</mx:AddChild>
    	</mx:State>
    	<mx:State name="Source">
			<mx:RemoveChild	target="{reportLinkage}"/>
    		<mx:AddChild relativeTo="{content}">
            	 <com:SourceReport id="sourceReport" height="100%" width="100%"/>
			</mx:AddChild>
    	</mx:State>
    	
    	<mx:State name="ProjectReport">
			<mx:RemoveChild	target="{reportLinkage}"/>
    		<mx:AddChild relativeTo="{content}">
            	 <com:ImprovementProjectsReport id="projectReport" height="100%" width="100%"/>
			</mx:AddChild>
    	</mx:State>
    	
    	<mx:State name="MissingApproachesReport">
			<mx:RemoveChild	target="{reportLinkage}"/>
    		<mx:AddChild relativeTo="{content}">
            	 <com:ReportMissingApproaches id="missingAppReport" width="100%" height="100%"/>
			</mx:AddChild>
    	</mx:State>
    	
	</mx:states>
	
	<mx:Fade id="Add" duration="1000"/>
	
	   	<mx:Canvas id="menu" width="18%" height="100%"> 
			<com:ReportMenuTitle LinkageReport="ContentPageChange(event)" ScoreReport="ContentPageChange(event)" FeedbackReport="ContentPageChange(event)" SummaryReport="ContentPageChange(event)" SourceReport="ContentPageChange(event)" AttachDocumentReport="ContentPageChange(event)" ProjectReport="ContentPageChange(event)" MissingApproachesReport="ContentPageChange(event)" id="menuitems" width="100%" height="100%"/>
		</mx:Canvas>
				
		<mx:Canvas id="content" width="82%" height="100%"  horizontalScrollPolicy="off"> 
			<com:ReportLinkage id="reportLinkage" width="100%" height="100%" addedEffect="Add"/>
		</mx:Canvas>
		
</mx:HBox>
